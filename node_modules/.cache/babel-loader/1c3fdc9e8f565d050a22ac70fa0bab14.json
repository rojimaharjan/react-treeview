{"ast":null,"code":"var _jsxFileName = \"D:\\\\task\\\\JMarquardt\\\\react-treeview-demo\\\\src\\\\components\\\\Treeview.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { BsPlusCircleFill } from \"react-icons/bs\";\nimport SingleItem from './SingleItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Treeview() {\n  _s();\n\n  const [nodesList, setNodeList] = useState([]);\n  const [t, setT] = useState('');\n  useEffect(() => {\n    const nodesList = [];\n    setNodeList(nodesList);\n  }, []);\n\n  const onEdit = (newTitle, currentItem) => {\n    const newNodes = nodesList.slice();\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem);\n    currentNode.title = newTitle;\n    setNodeList(newNodes);\n  };\n\n  const onDelete = currentItem => {\n    let newNodes = nodesList.slice();\n    let currentNode = findNode(currentItem.title, currentItem.level, currentItem);\n    let strCurrentNode = JSON.stringify(currentNode);\n    const strNewNodes = JSON.stringify(newNodes);\n    let removedArray = strNewNodes.replace(strCurrentNode, \"\"); // removing dangling commas if any !!!\n\n    removedArray = removedArray.replace(',,', ',');\n    removedArray = removedArray.replace(',]', ']');\n    removedArray = removedArray.replace('[,', '[');\n    newNodes = JSON.parse(removedArray);\n    setNodeList(newNodes);\n  };\n\n  const onAddChild = currentItem => {\n    const newNodes = nodesList.slice();\n    const noOfChildren = currentItem.child.length;\n    const newChild = {\n      'title': `${currentItem.title}.${noOfChildren}`,\n      'child': [],\n      'level': currentItem.level + 1,\n      'showChild': true\n    };\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem);\n    currentNode.child.push(newChild);\n    currentNode.showChild = true;\n    setNodeList(newNodes);\n  };\n\n  const onAddParent = ({\n    text\n  }) => {\n    const newNodes = nodesList.slice();\n    console.log(text);\n    const newChild = {\n      'title': text,\n      'child': [],\n      'level': 0,\n      'showChild': true\n    };\n    const lastChild = newNodes.slice(-1)[0];\n\n    if (lastChild) {\n      newChild.title = `${newChild.title}${lastChild.title}`;\n    }\n\n    newNodes.push(newChild);\n    setNodeList(newNodes);\n  }; // HELPER METHODS\n\n\n  const findNode = (title, level, currentNode) => {\n    let i, currentChild, result;\n\n    if (title === currentNode.title && level === currentNode.level) {\n      return currentNode;\n    } else {\n      for (i = 0; i < currentNode.child.length; i += 1) {\n        currentChild = currentNode.child[i];\n        result = findNode(title, level, currentChild);\n\n        if (result !== false) {\n          return result;\n        }\n      }\n\n      return false;\n    }\n  };\n\n  const toggleShowChildren = currentItem => {\n    const newNodes = nodesList.slice();\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem);\n    currentNode.showChild = !currentNode.showChild;\n    setNodeList(newNodes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: t,\n        onChange: e => setT(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), \" \\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: t => onAddParent(t),\n        children: /*#__PURE__*/_jsxDEV(BsPlusCircleFill, {\n          className: \"large-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), nodesList && nodesList.length > 0 && nodesList.map((item, index) => /*#__PURE__*/_jsxDEV(SingleItem, {\n      currentItem: item,\n      title: item.title,\n      onEdit: (newTitle, item) => onEdit(newTitle, item),\n      onDelete: onDelete,\n      onAddChild: item => onAddChild(item, index),\n      toggleShowChildren: toggleShowChildren\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Treeview, \"ujwL1JM1e334yCA6BSobcEDry08=\");\n\n_c = Treeview;\nexport default Treeview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Treeview\");","map":{"version":3,"sources":["D:/task/JMarquardt/react-treeview-demo/src/components/Treeview.js"],"names":["React","useEffect","useState","BsPlusCircleFill","SingleItem","Treeview","nodesList","setNodeList","t","setT","onEdit","newTitle","currentItem","newNodes","slice","currentNode","findNode","title","level","onDelete","strCurrentNode","JSON","stringify","strNewNodes","removedArray","replace","parse","onAddChild","noOfChildren","child","length","newChild","push","showChild","onAddParent","text","console","log","lastChild","i","currentChild","result","toggleShowChildren","e","target","value","map","item","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { BsPlusCircleFill } from \"react-icons/bs\"\nimport SingleItem from './SingleItem'\n\nfunction Treeview() {\n  const [nodesList, setNodeList] = useState([]);\n  const [t, setT] = useState('')\n\n  useEffect(() => {\n    const nodesList = []\n    setNodeList(nodesList);\n  }, [])\n\n  const onEdit = (newTitle, currentItem) => {\n    const newNodes = nodesList.slice()\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem)\n    currentNode.title = newTitle\n    setNodeList(newNodes)\n  }\n\n  const onDelete = (currentItem) => {\n    let newNodes = nodesList.slice()\n    let currentNode = findNode(currentItem.title, currentItem.level, currentItem)\n\n    let strCurrentNode = JSON.stringify(currentNode)\n    const strNewNodes = JSON.stringify(newNodes)\n\n    let removedArray = strNewNodes.replace(strCurrentNode, \"\")\n    \n    // removing dangling commas if any !!!\n    removedArray = removedArray.replace(',,', ',')\n    removedArray = removedArray.replace(',]', ']')\n    removedArray = removedArray.replace('[,', '[')\n\n    newNodes = JSON.parse(removedArray)\n    setNodeList(newNodes)\n\n  }\n\n  const onAddChild = (currentItem) => {\n    const newNodes = nodesList.slice()\n    const noOfChildren = currentItem.child.length\n    const newChild = { 'title': `${currentItem.title}.${noOfChildren}`, 'child': [], 'level': currentItem.level + 1, 'showChild': true }\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem)\n    currentNode.child.push(newChild)\n    currentNode.showChild = true\n    setNodeList(newNodes)\n  }\n\n  const onAddParent = ( {text}) => {\n    const newNodes = nodesList.slice()\n    console.log(text)\n    const newChild = { 'title': text, 'child': [], 'level': 0, 'showChild': true }\n    const lastChild = newNodes.slice(-1)[0]\n    if (lastChild) {\n      newChild.title = `${newChild.title}${lastChild.title}`\n    }\n    newNodes.push(newChild)\n    setNodeList(newNodes)\n  }\n\n  // HELPER METHODS\n  const findNode = (title, level, currentNode) => {\n    let i, currentChild, result\n\n    if (title === currentNode.title && level === currentNode.level) {\n      return currentNode\n    } else {\n      for (i = 0; i < currentNode.child.length; i += 1) {\n        currentChild = currentNode.child[i]\n        result = findNode(title, level, currentChild)\n        if (result !== false) {\n          return result\n        }\n      }\n      return false\n    }\n  }\n\n  const toggleShowChildren = (currentItem) => {\n    const newNodes = nodesList.slice()\n    const currentNode = findNode(currentItem.title, currentItem.level, currentItem)\n    currentNode.showChild = !currentNode.showChild\n    setNodeList(newNodes)\n  }\n\n  return (\n    <div>\n      {/* <h6>\n        Click to add &nbsp;\n            <span onClick={onAddParent}>\n          <BsPlusCircleFill className=\"large-icon\" />\n        </span>\n      </h6> */}\n\n      <h6>\n        <input type=\"text\" value={t} onChange ={(e) => setT(e.target.value)}/> &nbsp;\n            <span onClick={(t)=> onAddParent(t)}>\n          <BsPlusCircleFill className=\"large-icon\" />\n        </span>\n        </h6>\n      {\n        (nodesList && nodesList.length > 0) &&\n        nodesList.map((item, index) =>\n          <SingleItem\n            key={index}\n            currentItem={item}\n            title={item.title}\n            onEdit={(newTitle, item) => onEdit(newTitle, item)}\n            onDelete={onDelete}\n            onAddChild={(item) => onAddChild(item, index)}\n            toggleShowChildren={toggleShowChildren}\n          />\n        )\n      }\n\n    </div>\n  )\n}\n\nexport default Treeview\n"]},"metadata":{},"sourceType":"module"}